type User @aws_api_key @aws_cognito_user_pools {
  id: String!
  username: String!
  age: Int!
  bio: String!
  genderM: Int!
  genderF: Int!
  profileEmoji: String!
  createdOn: String!
  features: [Feature] @connection
}

type Feature @aws_api_key @aws_cognito_user_pools {
  emoji: String!
}

type Query {
  user(userId: String): User @aws_api_key @aws_cognito_user_pools
  candidates(userId: String): [User] @aws_api_key @aws_cognito_user_pools
  matches(userId: String): [User] @aws_api_key @aws_cognito_user_pools
}

type Mutation {
  createUser(userId: String, username: String): User
    @aws_api_key
    @aws_cognito_user_pools
  updateUser(user: UpdateUserInput): User @aws_api_key @aws_cognito_user_pools
  likeUser(userId: String, otherUserId: String): User
    @aws_api_key
    @aws_cognito_user_pools
  dislikeUser(userId: String, otherUserId: String): User
    @aws_api_key
    @aws_cognito_user_pools
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
}

input UpdateUserInput {
  id: String
  username: String!
  age: Int!
  bio: String!
  genderM: Int!
  genderF: Int!
  profileEmoji: String!
  createdOn: String!
  features: [FeatureInput]
}

input FeatureInput {
  emoji: String!
}
